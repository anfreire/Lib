import os
import sys
import time
import myLyb as scripts



#----------------------------------------------#
# Constants

LANGUAGES = {"C": "1", "C++": "2"}
C_COMPILER = {"cc": "1", "gcc": "2", "clang": "3"}
CPP_COMPILER = {"c++": "1", "g++": "2", "clang++": "3"}
CPP_STANDARD = {"c++98": "1", "c++03": "2", "c++11": "3", "c++14": "4", "c++17": "5", "c++20": "6"}
WALL_WEXTRA_WERROR = "-Wall -Wextra -Werror"
FSANITIZE = "-fsanitize=address"


#----------------------------------------------#
# Exceptions

class PathCannotBeEmpty(Exception):
    '''
    ### Exception raised when the path is empty.
    '''
    def __init__(self):
        self.message = scripts.str_color('Path cannot be empty.', 'red')
        super().__init__(self.message)

class ExtensionCannotBeEmpty(Exception):
    '''
    ### Exception raised when the extension is empty.
    '''
    def __init__(self):
        self.message = scripts.str_color('Extension cannot be empty.', 'red')
        super().__init__(self.message)

class WrongExtension(Exception):
    '''
    ### Exception raised when the extension is wrong.
    '''
    def __init__(self):
        self.message = scripts.str_color('Wrong extension. The extension must start with ".".', 'red')
        super().__init__(self.message)


#----------------------------------------------#
# Functions

def get_all_files(path: str, extension: str = '.cpp') -> list:
    '''
    ### Returns a list with all the files in a directory.
    #### Parameters:
    - path: The path to the directory.
    - extension: The extension of the files to get. By default, it is '.cpp'.
    '''
    if path == None or path == '':
        raise PathCannotBeEmpty()
    if extension == None or extension == '':
        raise ExtensionCannotBeEmpty()
    if extension[0] != '.':
        raise WrongExtension()
    output = scripts.extract_output('ls ' + path)
    files = output.split('\n')
    files = [file for file in files if file.endswith(extension)]
    return files


def main():
    print(scripts.str_color("Ctrl + C to exit", "red") + "\n")
    print()
    scripts.type_writting(scripts.str_color(scripts.str_padding('MakefileCreator', 25), 'blue', True), 0.05)
    print('\n')
    scripts.type_writting(scripts.str_color(scripts.str_padding('by: anfreire', 25), 'white', True), 0.02)
    print('\n\n')
    while True:
        path = input(scripts.str_color('Enter the path of the Makefile: ', 'blue'))
        if path == ".":
            path = os.getcwd()
            break
        elif os.path.exists(path):
            break
        else:
            print(scripts.str_color('The path does not exist.\n', 'red') + ' Use "." to use the current directory.')
    file = open(path + "/Makefile", "w")
    file.write("# Makefile generated by MakefileCreator\n\n")
    print()
    name = input(scripts.str_color('Enter the name of the executable: ', 'blue'))
    file.write("NAME = " + name + "\n\n")
    language = ""
    print()
    while True:
        language = scripts.prompt_user(scripts.str_color('Select the language: ', 'blue'), LANGUAGES)
        if language == "1":
            language = ".c"
            break
        elif language == "2":
            language = ".cpp"
            break
        else:
            print(scripts.str_color('Invalid option.', 'red'))
    print()
    while True:
        files_path = input(scripts.str_color('Enter the path of the files: ', 'blue'))
        if (files_path.strip() == ""):
            file.write("SRCS = \n\n")
            break
        if files_path.strip() == ".":
            files_path = os.getcwd()
        try:
            files = get_all_files(files_path, language)
            if len(files) == 0:
                file.write("SRCS = \n\n")
                break
            file.write("SRCS = \\\n")
            for file_name in files:
                file.write("\t" + file_name + " \\\n")
            file.write("\n\n")
            break
        except:
            print(scripts.str_color('The path does not exist.\n', 'red') + ' Use "." to use the current directory. Or leave it empty to not add files.', 'white')
    file.write("OBJS_DIR = ./obj/\n\n")
    file.write("OBJS = $(addprefix $(OBJS_DIR), $(SRCS:.c=.o))\n\n")
    standtard = ""
    print()
    if language == ".c":
        c_compiler = scripts.prompt_user(scripts.str_color('Enter the C compiler: ', 'blue'), C_COMPILER)
        if c_compiler == "1":
            file.write("CC = cc\n\n")
        elif c_compiler == "2":
            file.write("CC = gcc\n\n")
        elif c_compiler == "3":
            file.write("CC = clang\n\n")
    elif language == ".cpp":
        cpp_compiler = scripts.prompt_user(scripts.str_color('Enter the C++ compiler: ', 'blue'), CPP_COMPILER)
        if cpp_compiler == "1":
            file.write("CC = c++\n\n")
        elif cpp_compiler == "2":
            file.write("CC = g++\n\n")
        elif cpp_compiler == "3":
            file.write("CC = clang++\n\n")
        cpp_standard = scripts.prompt_user(scripts.str_color('Select the C++ standard: ', 'blue'), CPP_STANDARD)
        if cpp_standard == "1":
            standtard = "-std=c++98"
        elif cpp_standard == "2":
            standtard = "-std=c++03"
        elif cpp_standard == "3":
            standtard = "-std=c++11"
        elif cpp_standard == "4":
            standtard = "-std=c++14"
        elif cpp_standard == "5":
            standtard = "-std=c++17"
        elif cpp_standard == "6":
            standtard = "-std=c++20"
    print()
    wall_wextra_werror = scripts.prompt_user(scripts.str_color('Do you want to use ' + scripts.str_color('-Wall -Wextra -Werror', 'white') + '? ', 'blue'))
    print()
    fsanizite = scripts.prompt_user(scripts.str_color('Do you want to use ' + scripts.str_color('-fsanitize=address', 'white') + '? ', 'blue'))
    if (language == '.c'):
        file.write("CFLAGS = ")
        if wall_wextra_werror == "y":
            file.write(WALL_WEXTRA_WERROR + " ")
        if fsanizite == "y":
            file.write(FSANITIZE + " ")
        file.write("\n\n")
    elif (language == '.cpp'):
        file.write("CPPFLAGS = " + standtard + " ")
        if wall_wextra_werror == "y":
            file.write(WALL_WEXTRA_WERROR + " ")
        if fsanizite == "y":
            file.write(FSANITIZE + " ")
        file.write("\n\n")
    file.write("all: $(NAME)\n\n")
    file.write("$(NAME): $(OBJS)\n")
    if language == ".c":
        file.write("\t$(CC) $(CFLAGS) $(OBJS) -o $(NAME)\n\n")
    elif language == ".cpp":
        file.write("\t$(CC) $(CPPFLAGS) $(OBJS) -o $(NAME)\n\n")
    file.write("$(OBJS_DIR)%.o: %.c\n")
    file.write("\tmkdir -p $(OBJS_DIR)\n")
    file.write("\t$(CC) $(CFLAGS) -c $< -o $@\n\n")
    file.write("clean:\n")
    file.write("\trm -rf $(OBJS_DIR)\n\n")
    file.write("fclean: clean\n")
    file.write("\trm -f $(NAME)\n\n")
    file.write("re: fclean all\n\n")
    file.write(".PHONY: all clean fclean re\n")
main()
